import * as tslib_1 from "tslib";
import { FormControl } from "@angular/forms";
import { ObjectMaker } from "../util/object-maker";
import { MESSAGE, CONTROLS_ERROR, VALUE_CHANGED_SYNC } from '../const';
import { ApplicationUtil } from '../util/app-util';
import { DisableProvider } from '../domain/disable-provider';
import { RXCODE, MODEL_INSTANCE, PATCH } from "../const/app.const";
import { DECORATORS } from "../const/decorators.const";
import { defaultContainer } from "../core/defaultContainer";
import { SANITIZERS } from "../util/sanitizers";
import { ErrorMessageBindingStrategy } from "../enums";
import { ReactiveFormConfig } from "../util/reactive-form-config";
var DIRTY = "dirty";
var TOUCHED = "touched";
var UNTOUCHED = "untouched";
var PRISTINE = "pristine";
var PENDING = "pending";
var RxFormControl = /** @class */ (function (_super) {
    tslib_1.__extends(RxFormControl, _super);
    function RxFormControl(formState, validator, asyncValidator, entityObject, baseObject, controlName, _sanitizers) {
        var _this = _super.call(this, formState, validator, asyncValidator) || this;
        _this.entityObject = entityObject;
        _this.baseObject = baseObject;
        _this._sanitizers = _sanitizers;
        _this._errorMessages = [];
        _this._childColumns = [];
        _this._refDisableControls = [];
        _this._refMessageControls = [];
        _this._refClassNameControls = [];
        _this._isPassedExpression = false;
        _this._dirty = false;
        _this._baseValue = formState === undefined ? null : _this.getFormState(formState);
        _this._isModified = false;
        _this.keyName = controlName;
        _this._errorMessageBindingStrategy = ReactiveFormConfig.get("reactiveForm.errorMessageBindingStrategy");
        if (_this._sanitizers) {
            var floatSanitizer = _this._sanitizers.filter(function (t) { return t.name == "toFloat"; })[0];
            if (floatSanitizer && _this._baseValue && ReactiveFormConfig.number && ReactiveFormConfig.number.decimalSymbol == ",") {
                var baseValue = String(_this._baseValue);
                if (baseValue.indexOf('.') != -1) {
                    _this._baseValue = baseValue.replace(".", ReactiveFormConfig.number.decimalSymbol);
                    _super.prototype.setValue.call(_this, _this._baseValue);
                }
            }
        }
        return _this;
    }
    Object.defineProperty(RxFormControl.prototype, "errors", {
        get: function () {
            return this._errors;
        },
        set: function (value) {
            this._errors = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxFormControl.prototype, "errorMessages", {
        get: function () {
            if (!this._messageExpression) {
                if (this._errorMessages.length == 0 && this.errors)
                    this.setControlErrorMessages();
            }
            else if (this._messageExpression && !this._isPassedExpression)
                return [];
            if (!this.errors && this._errorMessages.length > 0)
                this.setControlErrorMessages();
            return this._errorMessages;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxFormControl.prototype, "errorMessage", {
        get: function () {
            if (!this._messageExpression) {
                if (this._errorMessage == undefined && this.errors)
                    this.setControlErrorMessages();
            }
            else if (this._messageExpression && !this._isPassedExpression)
                return undefined;
            if (!this.errors && this._errorMessage)
                this.setControlErrorMessages();
            return this._errorMessage;
        },
        enumerable: true,
        configurable: true
    });
    RxFormControl.prototype.getFormState = function (value) {
        var baseValue = value;
        if (Array.isArray(value)) {
            baseValue = [];
            value.forEach(function (t) { return baseValue.push(t); });
        }
        return baseValue;
    };
    Object.defineProperty(RxFormControl.prototype, "isModified", {
        get: function () {
            return this._isModified;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxFormControl.prototype, "dirty", {
        get: function () {
            return this._dirty;
        },
        set: function (value) {
            this._dirty = value;
        },
        enumerable: true,
        configurable: true
    });
    RxFormControl.prototype.setValue = function (value, options) {
        var parsedValue = this.getSanitizedValue(value);
        if (options && options.dirty)
            this.baseObject[this.keyName] = value;
        this.entityObject[this.keyName] = parsedValue;
        _super.prototype.setValue.call(this, value, options);
        this.bindError();
        this.bindClassName();
        this.executeExpressions();
        this.callPatch();
        if (options && !options.updateChanged && this.root[VALUE_CHANGED_SYNC]) {
            this.root[VALUE_CHANGED_SYNC]();
        }
    };
    RxFormControl.prototype.getControlValue = function () {
        return this.getSanitizedValue(this.value);
    };
    RxFormControl.prototype.bindError = function () {
        if (this._messageExpression)
            this._isPassedExpression = this.executeExpression(this._messageExpression, this);
        this.setControlErrorMessages();
        this.errors = this.errors;
    };
    RxFormControl.prototype.bindClassName = function () {
        if (this.updateOnElementClass && typeof this.updateOnElementClass === "function") {
            var className = this.executeExpression(this._classNameExpression, this);
            var updateElement = this.updateOnElementClass;
            updateElement(className);
        }
    };
    RxFormControl.prototype.markAsTouched = function (opts) {
        var currentState = this.touched;
        _super.prototype.markAsTouched.call(this, opts);
        if (currentState != this.touched)
            this.runControlPropChangeExpression([TOUCHED, UNTOUCHED]);
    };
    RxFormControl.prototype.markAsUntouched = function (opts) {
        var currentState = this.untouched;
        _super.prototype.markAsUntouched.call(this, opts);
        if (currentState != this.untouched)
            this.runControlPropChangeExpression([UNTOUCHED, TOUCHED]);
    };
    RxFormControl.prototype.markAsDirty = function (opts) {
        var currentState = this.dirty;
        _super.prototype.markAsDirty.call(this, opts);
        this.dirty = true;
        if (currentState != this.dirty)
            this.runControlPropChangeExpression([DIRTY]);
    };
    RxFormControl.prototype.markAsPristine = function (opts) {
        var currentState = this.pristine;
        _super.prototype.markAsDirty.call(this, opts);
        if (currentState != this.pristine)
            this.runControlPropChangeExpression([PRISTINE]);
    };
    RxFormControl.prototype.markAsPending = function (opts) {
        var currentState = this.pending;
        _super.prototype.markAsDirty.call(this, opts);
        if (currentState != this.pending)
            this.runControlPropChangeExpression([PENDING]);
    };
    RxFormControl.prototype.runControlPropChangeExpression = function (propNames) {
        var _this = this;
        propNames.forEach(function (name) {
            if ((_this._controlProp && _this._messageExpression && _this._controlProp[name]) || (!_this._messageExpression && _this.checkErrorMessageStrategy()))
                _this.bindError();
            if (_this._classNameControlProp && _this._classNameControlProp[name])
                _this.bindClassName();
        });
    };
    RxFormControl.prototype.refresh = function () {
        this.getMessageExpression(this.parent, this.keyName);
        this.bindConditionalControls(DECORATORS.disabled, "_refDisableControls");
        this.bindConditionalControls(DECORATORS.error, "_refMessageControls");
        this.bindConditionalControls(DECORATORS.elementClass, "_refClassNameControls");
        this.executeExpressions();
        this.bindError();
    };
    RxFormControl.prototype.reset = function (value) {
        if (value !== undefined)
            this.setValue(value);
        else
            this.setValue(this.getFormState(this._baseValue));
        this.dirty = false;
    };
    RxFormControl.prototype.commit = function () {
        this._baseValue = this.value;
        this.callPatch();
    };
    RxFormControl.prototype.callPatch = function () {
        this._isModified = this.getValue(this._baseValue) != this.getValue(this.value);
        if (this.parent && this.parent[PATCH])
            this.parent[PATCH](this.keyName);
    };
    RxFormControl.prototype.checkErrorMessageStrategy = function () {
        var isBind = true;
        switch (this._errorMessageBindingStrategy) {
            case ErrorMessageBindingStrategy.OnSubmit:
                isBind = this.parent.submitted;
                break;
            case ErrorMessageBindingStrategy.OnDirty:
                isBind = this.dirty;
                break;
            case ErrorMessageBindingStrategy.OnTouched:
                isBind = this.touched;
                break;
            case ErrorMessageBindingStrategy.OnDirtyOrTouched:
                isBind = this.dirty || this.touched;
                break;
            case ErrorMessageBindingStrategy.OnDirtyOrSubmit:
                isBind = this.dirty || this.parent.submitted;
                break;
            case ErrorMessageBindingStrategy.OnTouchedOrSubmit:
                isBind = this.touched || this.parent.submitted;
                break;
            default:
                isBind = true;
        }
        return isBind;
    };
    RxFormControl.prototype.executeExpressions = function () {
        this.processExpression("_refDisableControls", "disabled");
        this.processExpression("_refMessageControls", "bindError");
        this.processExpression("_refClassNameControls", "bindClassName");
    };
    RxFormControl.prototype.getMessageExpression = function (formGroup, keyName) {
        if (formGroup[MODEL_INSTANCE]) {
            var instanceContainer = defaultContainer.get(formGroup[MODEL_INSTANCE].constructor);
            if (instanceContainer) {
                this._messageExpression = instanceContainer.nonValidationDecorators.error.conditionalExpressions[keyName];
                this._controlProp = instanceContainer.nonValidationDecorators.error.controlProp[this.keyName];
                this._classNameExpression = instanceContainer.nonValidationDecorators.elementClass.conditionalExpressions[keyName];
                this._classNameControlProp = instanceContainer.nonValidationDecorators.elementClass.controlProp[keyName];
                if (this._classNameExpression)
                    this.updateOnElementClass = true;
            }
        }
    };
    RxFormControl.prototype.getSanitizedValue = function (value) {
        var e_1, _a;
        if (this._sanitizers) {
            try {
                for (var _b = tslib_1.__values(this._sanitizers), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var sanitizer = _c.value;
                    value = SANITIZERS[sanitizer.name](value, sanitizer.config);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return value;
    };
    RxFormControl.prototype.bindConditionalControls = function (decoratorType, refName) {
        var _this = this;
        this._disableProvider = new DisableProvider(decoratorType, this.entityObject);
        this[refName] = this._disableProvider.zeroArgumentProcess(this, this.keyName);
        this._disableProvider.oneArgumentProcess(this, "" + this.keyName + RXCODE + "1").forEach(function (t) { return _this[refName].push(t); });
    };
    RxFormControl.prototype.setControlErrorMessages = function () {
        var _this = this;
        if ((!this._messageExpression && this.checkErrorMessageStrategy()) || this._isPassedExpression) {
            this._errorMessages = [];
            if (this.errors) {
                Object.keys(this.errors).forEach(function (t) {
                    if (_this.parent) {
                        _this.parent[CONTROLS_ERROR][_this.keyName] = _this._errorMessage = _this.getErrorMessage(_this.errors, t);
                        if (!_this._errorMessage) {
                            var errorObject = ObjectMaker.toJson(t, undefined, [_this.errors[t][t]]);
                            _this.parent[CONTROLS_ERROR][_this.keyName] = _this._errorMessage = _this.getErrorMessage(errorObject, t);
                        }
                    }
                    else
                        _this._errorMessage = _this.getErrorMessage(_this.errors, t);
                    _this._errorMessages.push(_this._errorMessage);
                });
            }
            else {
                this._errorMessage = undefined;
                if (this.parent) {
                    this.parent[CONTROLS_ERROR][this.keyName] = undefined;
                    delete this.parent[CONTROLS_ERROR][this.keyName];
                }
            }
        }
        else {
            this._errorMessages = [];
            this._errorMessage = undefined;
        }
    };
    RxFormControl.prototype.getErrorMessage = function (errorObject, keyName) {
        if (errorObject[keyName][MESSAGE])
            return errorObject[keyName][MESSAGE];
        return;
    };
    RxFormControl.prototype.processExpression = function (propName, operationType) {
        var e_2, _a;
        if (this[propName])
            try {
                for (var _b = tslib_1.__values(this[propName]), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var controlInfo = _c.value;
                    var control = controlInfo.isRoot ? ApplicationUtil.getControl(controlInfo.controlPath, ApplicationUtil.getRootFormGroup(this)) : ApplicationUtil.getFormControl(controlInfo.controlPath, this);
                    if (control) {
                        if (operationType == "disabled") {
                            var result = this.executeExpression(controlInfo.conditionalExpression, control);
                            if (result)
                                control.disable();
                            else
                                control.enable();
                        }
                        else if (operationType == "bindError")
                            control.bindError();
                        else if (operationType == "bindClassName")
                            control.bindClassName();
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
    };
    RxFormControl.prototype.executeExpression = function (expression, control) {
        return expression.call(control.parent[MODEL_INSTANCE], control, ApplicationUtil.getParentModelInstanceValue(this), control.parent[MODEL_INSTANCE]);
    };
    RxFormControl.prototype.getValue = function (value) {
        return value !== undefined && value !== null && value !== "" ? value : "";
    };
    return RxFormControl;
}(FormControl));
export { RxFormControl };
//# sourceMappingURL=data:application/json;base64,