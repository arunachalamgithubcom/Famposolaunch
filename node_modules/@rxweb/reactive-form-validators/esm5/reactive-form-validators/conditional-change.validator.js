import { ObjectMaker } from "../util/object-maker";
import { ApplicationUtil } from "../util/app-util";
import { FormProvider } from "../util/form-provider";
var DISABLED_EXPRESSION = "disableExpression";
export function conditionalChangeValidator(conditionalValidationProps) {
    var timeOuts = [];
    var oldValue = undefined;
    var setTimeOut = function (control, config) {
        if (control[DISABLED_EXPRESSION])
            runDisabledExpression(control, config);
        var timeOut = setTimeout(function (t) {
            clearTimeout(timeOut);
            control.updateValueAndValidity();
        }, 100);
    };
    return function (control) {
        var _a;
        var value = control.value;
        if (control.parent && oldValue != value) {
            var rootFormGroup_1 = ApplicationUtil.getRootFormGroup(control);
            var parentFormGroup_1 = control.parent;
            oldValue = value;
            timeOuts = [];
            var controlName = ApplicationUtil.getFormControlName(control);
            var disabledConfig_1 = (_a = {}, _a[controlName] = value, _a);
            conditionalValidationProps.forEach(function (t) {
                var a = control;
                if (t.indexOf("[]") != -1) {
                    var splitText = t.split("[]");
                    var formArray = rootFormGroup_1.get([splitText[0]]);
                    if (formArray)
                        formArray.controls.forEach(function (formGroup) {
                            var abstractControl = formGroup.get(splitText[1]);
                            if (abstractControl) {
                                setTimeOut(abstractControl, disabledConfig_1);
                            }
                        });
                }
                else {
                    var splitText_1 = t.split('.');
                    if (splitText_1.length > 1) {
                        var control = null;
                        t.split('.').forEach(function (name, index) { control = (index == 0) ? rootFormGroup_1.controls[name] : control.controls[name]; });
                    }
                    else {
                        control = parentFormGroup_1.controls[t];
                    }
                    if (control) {
                        setTimeOut(control, disabledConfig_1);
                    }
                }
            });
        }
        return ObjectMaker.null();
    };
}
function runDisabledExpression(control, config) {
    var isDisabled = FormProvider.ProcessRule(control, { conditionalExpression: control[DISABLED_EXPRESSION], disableConfig: config });
    if (isDisabled && !control.disabled)
        control.disable();
    else if (control.disabled)
        control.enable();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uYWwtY2hhbmdlLnZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJyZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvY29uZGl0aW9uYWwtY2hhbmdlLnZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUNwRCxJQUFNLG1CQUFtQixHQUFXLG1CQUFtQixDQUFDO0FBQ3hELE1BQU0sVUFBVSwwQkFBMEIsQ0FBQywwQkFBb0M7SUFDM0UsSUFBSSxRQUFRLEdBQWEsRUFBRSxDQUFDO0lBQzVCLElBQUksUUFBUSxHQUFXLFNBQVMsQ0FBQztJQUNqQyxJQUFJLFVBQVUsR0FBRyxVQUFDLE9BQXdCLEVBQUUsTUFBVztRQUNuRCxJQUFJLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztZQUM1QixxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDM0MsSUFBSSxPQUFPLEdBQUcsVUFBVSxDQUFDLFVBQUEsQ0FBQztZQUN0QixZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdEIsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFDckMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ1gsQ0FBQyxDQUFBO0lBQ0QsT0FBTyxVQUFDLE9BQXdCOztRQUM1QixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQzFCLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxRQUFRLElBQUksS0FBSyxFQUFFO1lBQ3JDLElBQU0sZUFBYSxHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoRSxJQUFNLGlCQUFlLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUN2QyxRQUFRLEdBQUcsS0FBSyxDQUFDO1lBQ2pCLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDZCxJQUFJLFdBQVcsR0FBRyxlQUFlLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDOUQsSUFBSSxnQkFBYyxhQUFLLEdBQUMsV0FBVyxJQUFHLEtBQUssS0FBRSxDQUFDO1lBQzlDLDBCQUEwQixDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQztnQkFDaEIsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO29CQUN2QixJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUM5QixJQUFJLFNBQVMsR0FBYyxlQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDN0QsSUFBSSxTQUFTO3dCQUNULFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQUEsU0FBUzs0QkFDaEMsSUFBSSxlQUFlLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDbEQsSUFBSSxlQUFlLEVBQUU7Z0NBQ2pCLFVBQVUsQ0FBQyxlQUFlLEVBQUUsZ0JBQWMsQ0FBQyxDQUFDOzZCQUMvQzt3QkFDTCxDQUFDLENBQUMsQ0FBQTtpQkFDVDtxQkFBTTtvQkFFSCxJQUFJLFdBQVMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUM3QixJQUFJLFdBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO3dCQUN0QixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUM7d0JBQ25CLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBSSxFQUFFLEtBQUssSUFBTyxPQUFPLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtxQkFDN0g7eUJBQ0k7d0JBQ0QsT0FBTyxHQUFHLGlCQUFlLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUN6QztvQkFFRCxJQUFJLE9BQU8sRUFBRTt3QkFFVCxVQUFVLENBQUMsT0FBTyxFQUFFLGdCQUFjLENBQUMsQ0FBQztxQkFDdkM7aUJBQ0o7WUFDTCxDQUFDLENBQUMsQ0FBQTtTQUNMO1FBQ0QsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDOUIsQ0FBQyxDQUFBO0FBQ0wsQ0FBQztBQUNELFNBQVMscUJBQXFCLENBQUMsT0FBTyxFQUFFLE1BQU07SUFDMUMsSUFBSSxVQUFVLEdBQUcsWUFBWSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxPQUFPLENBQUMsbUJBQW1CLENBQUMsRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNuSSxJQUFJLFVBQVUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRO1FBQy9CLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNqQixJQUFJLE9BQU8sQ0FBQyxRQUFRO1FBQ3JCLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUN6QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIFZhbGlkYXRvckZuLFxyXG4gICAgQWJzdHJhY3RDb250cm9sLFxyXG5cclxuICAgIEZvcm1BcnJheVxyXG59IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5cclxuaW1wb3J0IHsgT2JqZWN0TWFrZXIgfSBmcm9tIFwiLi4vdXRpbC9vYmplY3QtbWFrZXJcIjtcclxuaW1wb3J0IHsgQXBwbGljYXRpb25VdGlsIH0gZnJvbSBcIi4uL3V0aWwvYXBwLXV0aWxcIlxyXG5pbXBvcnQgeyBGb3JtUHJvdmlkZXIgfSBmcm9tIFwiLi4vdXRpbC9mb3JtLXByb3ZpZGVyXCJcclxuY29uc3QgRElTQUJMRURfRVhQUkVTU0lPTjogc3RyaW5nID0gXCJkaXNhYmxlRXhwcmVzc2lvblwiO1xyXG5leHBvcnQgZnVuY3Rpb24gY29uZGl0aW9uYWxDaGFuZ2VWYWxpZGF0b3IoY29uZGl0aW9uYWxWYWxpZGF0aW9uUHJvcHM6IHN0cmluZ1tdKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgdmFyIHRpbWVPdXRzOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgdmFyIG9sZFZhbHVlOiBzdHJpbmcgPSB1bmRlZmluZWQ7XHJcbiAgICB2YXIgc2V0VGltZU91dCA9IChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wsIGNvbmZpZzogYW55KSA9PiB7XHJcbiAgICAgICAgaWYgKGNvbnRyb2xbRElTQUJMRURfRVhQUkVTU0lPTl0pXHJcbiAgICAgICAgICAgIHJ1bkRpc2FibGVkRXhwcmVzc2lvbihjb250cm9sLCBjb25maWcpO1xyXG4gICAgICAgIHZhciB0aW1lT3V0ID0gc2V0VGltZW91dCh0ID0+IHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVPdXQpO1xyXG4gICAgICAgICAgICBjb250cm9sLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcclxuICAgICAgICB9LCAxMDApXHJcbiAgICB9XHJcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPT4ge1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IGNvbnRyb2wudmFsdWU7XHJcbiAgICAgICAgaWYgKGNvbnRyb2wucGFyZW50ICYmIG9sZFZhbHVlICE9IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvb3RGb3JtR3JvdXAgPSBBcHBsaWNhdGlvblV0aWwuZ2V0Um9vdEZvcm1Hcm91cChjb250cm9sKTtcclxuICAgICAgICAgICAgY29uc3QgcGFyZW50Rm9ybUdyb3VwID0gY29udHJvbC5wYXJlbnQ7XHJcbiAgICAgICAgICAgIG9sZFZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRpbWVPdXRzID0gW107XHJcbiAgICAgICAgICAgIGxldCBjb250cm9sTmFtZSA9IEFwcGxpY2F0aW9uVXRpbC5nZXRGb3JtQ29udHJvbE5hbWUoY29udHJvbCk7XHJcbiAgICAgICAgICAgIGxldCBkaXNhYmxlZENvbmZpZyA9IHsgW2NvbnRyb2xOYW1lXTogdmFsdWUgfTtcclxuICAgICAgICAgICAgY29uZGl0aW9uYWxWYWxpZGF0aW9uUHJvcHMuZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBhID0gY29udHJvbDtcclxuICAgICAgICAgICAgICAgIGlmICh0LmluZGV4T2YoXCJbXVwiKSAhPSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzcGxpdFRleHQgPSB0LnNwbGl0KFwiW11cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvcm1BcnJheSA9IDxGb3JtQXJyYXk+cm9vdEZvcm1Hcm91cC5nZXQoW3NwbGl0VGV4dFswXV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtQXJyYXkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1BcnJheS5jb250cm9scy5mb3JFYWNoKGZvcm1Hcm91cCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWJzdHJhY3RDb250cm9sID0gZm9ybUdyb3VwLmdldChzcGxpdFRleHRbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFic3RyYWN0Q29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVPdXQoYWJzdHJhY3RDb250cm9sLCBkaXNhYmxlZENvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3BsaXRUZXh0ID0gdC5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcGxpdFRleHQubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udHJvbCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc3BsaXQoJy4nKS5mb3JFYWNoKChuYW1lLCBpbmRleCkgPT4geyBjb250cm9sID0gKGluZGV4ID09IDApID8gcm9vdEZvcm1Hcm91cC5jb250cm9sc1tuYW1lXSA6IGNvbnRyb2wuY29udHJvbHNbbmFtZV07IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sID0gcGFyZW50Rm9ybUdyb3VwLmNvbnRyb2xzW3RdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2wpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVPdXQoY29udHJvbCwgZGlzYWJsZWRDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdE1ha2VyLm51bGwoKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBydW5EaXNhYmxlZEV4cHJlc3Npb24oY29udHJvbCwgY29uZmlnKSB7XHJcbiAgICBsZXQgaXNEaXNhYmxlZCA9IEZvcm1Qcm92aWRlci5Qcm9jZXNzUnVsZShjb250cm9sLCB7IGNvbmRpdGlvbmFsRXhwcmVzc2lvbjogY29udHJvbFtESVNBQkxFRF9FWFBSRVNTSU9OXSwgZGlzYWJsZUNvbmZpZzogY29uZmlnIH0pO1xyXG4gICAgaWYgKGlzRGlzYWJsZWQgJiYgIWNvbnRyb2wuZGlzYWJsZWQpXHJcbiAgICAgICAgY29udHJvbC5kaXNhYmxlKCk7XHJcbiAgICBlbHNlIGlmIChjb250cm9sLmRpc2FibGVkKVxyXG4gICAgICAgIGNvbnRyb2wuZW5hYmxlKCk7XHJcbn1cclxuIl19