import { Linq } from './linq';
import { ApplicationUtil } from './app-util';
import { RxFormGroup } from "../services/rx-form-group";
var FormProvider = /** @class */ (function () {
    function FormProvider() {
    }
    FormProvider.ProcessRule = function (control, config, isDynamicConfig) {
        if (isDynamicConfig === void 0) { isDynamicConfig = false; }
        var formGroupValue = ApplicationUtil.getParentObjectValue(control);
        var parentObject = (control.parent) ? ApplicationUtil.cloneValue(control.parent.value) : undefined;
        var modelInstance = undefined;
        if (control.parent && control.parent instanceof RxFormGroup)
            modelInstance = control.parent.modelInstance;
        if (parentObject) {
            this.updateFormControlValue(parentObject, control.parent.controls, control, config);
            this.forDisableUpdate(parentObject, config);
        }
        else if (config.conditionalExpression)
            return false;
        return Linq.execute(formGroupValue, config, parentObject, modelInstance, isDynamicConfig);
    };
    FormProvider.updateFormControlValue = function (parentObject, controls, control, config) {
        for (var controlName in parentObject) {
            if (!(parentObject[controlName] instanceof Object))
                if (controls[controlName] === control) {
                    parentObject[controlName] = control.value;
                    break;
                }
        }
    };
    FormProvider.forDisableUpdate = function (parentObject, config) {
        if (config.disableConfig)
            Object.keys(config.disableConfig).forEach(function (column) {
                parentObject[column] = config.disableConfig[column];
            });
    };
    return FormProvider;
}());
export { FormProvider };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJ1dGlsL2Zvcm0tcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUM3QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBSzdDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQTtBQUV2RDtJQUFBO0lBa0NBLENBQUM7SUE5QlUsd0JBQVcsR0FBbEIsVUFBbUIsT0FBdUIsRUFBQyxNQUFVLEVBQUMsZUFBK0I7UUFBL0IsZ0NBQUEsRUFBQSx1QkFBK0I7UUFDakYsSUFBTSxjQUFjLEdBQUcsZUFBZSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JFLElBQU0sWUFBWSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNyRyxJQUFJLGFBQWEsR0FBRyxTQUFTLENBQUM7UUFDOUIsSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLFlBQVksV0FBVztZQUN2RCxhQUFhLEdBQWlCLE9BQU8sQ0FBQyxNQUFPLENBQUMsYUFBYSxDQUFDO1FBQ2hFLElBQUksWUFBWSxFQUFFO1lBQ2QsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDcEYsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQTtTQUM5QzthQUNJLElBQUksTUFBTSxDQUFDLHFCQUFxQjtZQUNqQyxPQUFPLEtBQUssQ0FBQztRQUNqQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUMsYUFBYSxFQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzVGLENBQUM7SUFFYyxtQ0FBc0IsR0FBckMsVUFBc0MsWUFBK0IsRUFBQyxRQUFZLEVBQUMsT0FBdUIsRUFBQyxNQUFVO1FBQ2pILEtBQUksSUFBSSxXQUFXLElBQUksWUFBWSxFQUFDO1lBQ2hDLElBQUcsQ0FBQyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsWUFBWSxNQUFNLENBQUM7Z0JBQzdDLElBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxLQUFLLE9BQU8sRUFBQztvQkFDakMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxHQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUM7b0JBQ3pDLE1BQU07aUJBQ1Q7U0FDUjtJQUNMLENBQUM7SUFDYyw2QkFBZ0IsR0FBL0IsVUFBZ0MsWUFBWSxFQUFDLE1BQU07UUFDL0MsSUFBSSxNQUFNLENBQUMsYUFBYTtZQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxNQUFNO2dCQUM1QyxZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4RCxDQUFDLENBQUMsQ0FBQTtJQUNWLENBQUM7SUFDTCxtQkFBQztBQUFELENBQUMsQUFsQ0QsSUFrQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xpbnEgfSBmcm9tICcuL2xpbnEnO1xyXG5pbXBvcnQgeyBBcHBsaWNhdGlvblV0aWwgfSBmcm9tICcuL2FwcC11dGlsJztcclxuaW1wb3J0IHtcclxuICAgIEFic3RyYWN0Q29udHJvbFxyXG59IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5cclxuaW1wb3J0IHsgUnhGb3JtR3JvdXAgfSBmcm9tIFwiLi4vc2VydmljZXMvcngtZm9ybS1ncm91cFwiXHJcblxyXG5leHBvcnQgY2xhc3MgRm9ybVByb3ZpZGVye1xyXG5cclxuICAgXHJcblxyXG4gICAgc3RhdGljIFByb2Nlc3NSdWxlKGNvbnRyb2w6QWJzdHJhY3RDb250cm9sLGNvbmZpZzphbnksaXNEeW5hbWljQ29uZmlnOmJvb2xlYW4gPSBmYWxzZSkgOiBib29sZWFuIHwge1trZXk6c3RyaW5nXTphbnl9IHtcclxuICAgICAgICBjb25zdCBmb3JtR3JvdXBWYWx1ZSA9IEFwcGxpY2F0aW9uVXRpbC5nZXRQYXJlbnRPYmplY3RWYWx1ZShjb250cm9sKTtcclxuICAgICAgICBjb25zdCBwYXJlbnRPYmplY3QgPSAoY29udHJvbC5wYXJlbnQpID8gQXBwbGljYXRpb25VdGlsLmNsb25lVmFsdWUoY29udHJvbC5wYXJlbnQudmFsdWUpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGxldCBtb2RlbEluc3RhbmNlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmIChjb250cm9sLnBhcmVudCAmJiBjb250cm9sLnBhcmVudCBpbnN0YW5jZW9mIFJ4Rm9ybUdyb3VwKVxyXG4gICAgICAgICAgICBtb2RlbEluc3RhbmNlID0gKDxSeEZvcm1Hcm91cD5jb250cm9sLnBhcmVudCkubW9kZWxJbnN0YW5jZTtcclxuICAgICAgICBpZiAocGFyZW50T2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRm9ybUNvbnRyb2xWYWx1ZShwYXJlbnRPYmplY3QsIGNvbnRyb2wucGFyZW50LmNvbnRyb2xzLCBjb250cm9sLCBjb25maWcpO1xyXG4gICAgICAgICAgICB0aGlzLmZvckRpc2FibGVVcGRhdGUocGFyZW50T2JqZWN0LCBjb25maWcpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNvbmZpZy5jb25kaXRpb25hbEV4cHJlc3Npb24pXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gTGlucS5leGVjdXRlKGZvcm1Hcm91cFZhbHVlLCBjb25maWcsIHBhcmVudE9iamVjdCxtb2RlbEluc3RhbmNlLGlzRHluYW1pY0NvbmZpZyk7IFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIHVwZGF0ZUZvcm1Db250cm9sVmFsdWUocGFyZW50T2JqZWN0Ontba2V5OnN0cmluZ106YW55fSxjb250cm9sczphbnksY29udHJvbDpBYnN0cmFjdENvbnRyb2wsY29uZmlnOmFueSl7XHJcbiAgICAgICAgZm9yKHZhciBjb250cm9sTmFtZSBpbiBwYXJlbnRPYmplY3Qpe1xyXG4gICAgICAgICAgICBpZighKHBhcmVudE9iamVjdFtjb250cm9sTmFtZV0gaW5zdGFuY2VvZiBPYmplY3QpKVxyXG4gICAgICAgICAgICAgICAgaWYoY29udHJvbHNbY29udHJvbE5hbWVdID09PSBjb250cm9sKXtcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRPYmplY3RbY29udHJvbE5hbWVdPSBjb250cm9sLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgc3RhdGljIGZvckRpc2FibGVVcGRhdGUocGFyZW50T2JqZWN0LGNvbmZpZykge1xyXG4gICAgICAgIGlmIChjb25maWcuZGlzYWJsZUNvbmZpZylcclxuICAgICAgICAgICAgT2JqZWN0LmtleXMoY29uZmlnLmRpc2FibGVDb25maWcpLmZvckVhY2goY29sdW1uID0+IHtcclxuICAgICAgICAgICAgICAgIHBhcmVudE9iamVjdFtjb2x1bW5dID0gY29uZmlnLmRpc2FibGVDb25maWdbY29sdW1uXTtcclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG4iXX0=