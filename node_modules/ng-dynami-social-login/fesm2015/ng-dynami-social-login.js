import { Injectable, NgModule } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class BaseLoginProvider {
    constructor() { }
    /**
     * @param {?} obj
     * @param {?} onload
     * @return {?}
     */
    loadScript(obj, onload) {
        if (document.getElementById(obj.name)) {
            return;
        }
        /** @type {?} */
        let signInJS = document.createElement('script');
        signInJS.async = true;
        signInJS.src = obj.url;
        signInJS.onload = onload;
        if (obj.name === 'LINKEDIN') {
            signInJS.async = false;
            signInJS.text = ('api_key: ' + obj.id).replace('\'', '');
        }
        document.head.appendChild(signInJS);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class LinkedInResponseModel {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class LoginProviderClassModel {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class SocialUserModel {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class FacebookLoginProvider extends BaseLoginProvider {
    /**
     * @param {?} clientId
     */
    constructor(clientId) {
        super();
        this.clientId = clientId;
        this.loginProviderObj = new LoginProviderClassModel();
        this.loginProviderObj.id = clientId;
        this.loginProviderObj.name = 'facebook';
        this.loginProviderObj.url = 'https://connect.facebook.net/en_US/sdk.js';
    }
    /**
     * @return {?}
     */
    initialize() {
        return new Promise((resolve, reject) => {
            this.loadScript(this.loginProviderObj, () => {
                FB.init({
                    appId: this.clientId,
                    autoLogAppEvents: true,
                    cookie: true,
                    xfbml: true,
                    version: 'v2.10'
                });
                FB.AppEvents.logPageView();
                FB.getLoginStatus(function (response) {
                    if (response.status === 'connected') {
                        /** @type {?} */
                        const accessToken = FB.getAuthResponse()['accessToken'];
                        FB.api('/me?fields=name,email,picture', (res) => {
                            resolve(FacebookLoginProvider.drawUser(Object.assign({}, { token: accessToken }, res)));
                        });
                    }
                });
            });
        });
    }
    /**
     * @param {?} response
     * @return {?}
     */
    static drawUser(response) {
        /** @type {?} */
        let user = new SocialUserModel();
        user.id = response.id;
        user.name = response.name;
        user.email = response.email;
        user.token = response.token;
        user.image = 'https://graph.facebook.com/' + response.id + '/picture?type=normal';
        return user;
    }
    /**
     * @return {?}
     */
    signIn() {
        return new Promise((resolve, reject) => {
            FB.login((response) => {
                if (response.authResponse) {
                    /** @type {?} */
                    const accessToken = FB.getAuthResponse()['accessToken'];
                    FB.api('/me?fields=name,email,picture', (res) => {
                        resolve(FacebookLoginProvider.drawUser(Object.assign({}, { token: accessToken }, res)));
                    });
                }
            }, { scope: 'email,public_profile' });
        });
    }
    /**
     * @return {?}
     */
    signOut() {
        return new Promise((resolve, reject) => {
            FB.logout((response) => {
                resolve();
            });
        });
    }
}
FacebookLoginProvider.PROVIDER_ID = 'facebook';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class GoogleLoginProvider extends BaseLoginProvider {
    /**
     * @param {?} clientId
     */
    constructor(clientId) {
        super();
        this.clientId = clientId;
        this.loginProviderObj = new LoginProviderClassModel();
        this.loginProviderObj.id = clientId;
        this.loginProviderObj.name = 'google';
        this.loginProviderObj.url = 'https://apis.google.com/js/platform.js';
    }
    /**
     * @return {?}
     */
    initialize() {
        return new Promise((resolve, reject) => {
            this.loadScript(this.loginProviderObj, () => {
                gapi.load('auth2', () => {
                    this.auth2 = gapi.auth2.init({
                        client_id: this.clientId,
                        scope: 'email'
                    });
                    this.auth2.then(() => {
                        if (this.auth2.isSignedIn.get()) {
                            resolve(this.drawUser());
                        }
                    });
                });
            });
        });
    }
    /**
     * @return {?}
     */
    drawUser() {
        /** @type {?} */
        let user = new SocialUserModel();
        /** @type {?} */
        let profile = this.auth2.currentUser.get().getBasicProfile();
        /** @type {?} */
        let authResponseObj = this.auth2.currentUser.get().getAuthResponse(true);
        user.id = profile.getId();
        user.name = profile.getName();
        user.email = profile.getEmail();
        user.image = profile.getImageUrl();
        user.token = authResponseObj.access_token;
        user.idToken = authResponseObj.id_token;
        return user;
    }
    /**
     * @return {?}
     */
    signIn() {
        return new Promise((resolve, reject) => {
            /** @type {?} */
            let promise = this.auth2.signIn();
            promise.then(() => {
                resolve(this.drawUser());
            });
        });
    }
    /**
     * @return {?}
     */
    signOut() {
        return new Promise((resolve, reject) => {
            this.auth2.signOut().then((err) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
}
GoogleLoginProvider.PROVIDER_ID = 'google';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class LinkedinLoginProvider extends BaseLoginProvider {
    /**
     * @param {?} clientId
     */
    constructor(clientId) {
        super();
        this.clientId = clientId;
        this.loginProviderObj = new LoginProviderClassModel();
        this.loginProviderObj.id = clientId;
        this.loginProviderObj.name = 'linkedin';
        this.loginProviderObj.url = 'https://platform.linkedin.com/in.js';
    }
    /**
     * @return {?}
     */
    initialize() {
        return new Promise((resolve, reject) => {
            this.loadScript(this.loginProviderObj, () => {
                IN.init({
                    api_key: this.clientId,
                    authorize: true,
                    onLoad: this.onLinkedInLoad()
                });
                IN.Event.on(IN, 'auth', () => {
                    if (IN.User.isAuthorized()) {
                        IN.API.Raw('/people/~:(id,first-name,last-name,email-address,picture-url)').result((res) => {
                            resolve(this.drawUser(res));
                        });
                    }
                });
            });
        });
    }
    /**
     * @return {?}
     */
    onLinkedInLoad() {
        IN.Event.on(IN, 'systemReady', () => {
            IN.User.refresh();
        });
    }
    /**
     * @param {?} response
     * @return {?}
     */
    drawUser(response) {
        /** @type {?} */
        let user = new SocialUserModel();
        user.id = response.emailAddress;
        user.name = response.firstName + ' ' + response.lastName;
        user.email = response.emailAddress;
        user.image = response.pictureUrl;
        user.token = IN.ENV.auth.oauth_token;
        return user;
    }
    /**
     * @return {?}
     */
    signIn() {
        return new Promise((resolve, reject) => {
            IN.User.authorize(() => {
                IN.API.Raw('/people/~:(id,first-name,last-name,email-address,picture-url)').result((res) => {
                    resolve(this.drawUser(res));
                });
            });
        });
    }
    /**
     * @return {?}
     */
    signOut() {
        return new Promise((resolve, reject) => {
            IN.User.logout((response) => {
                resolve();
            }, (err) => {
                reject(err);
            });
        });
    }
}
LinkedinLoginProvider.PROVIDER_ID = 'linkedin';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class AuthServiceConfig {
    /**
     * @param {?} providers
     */
    constructor(providers) {
        this.providers = new Map();
        for (let i = 0; i < providers.length; i++) {
            /** @type {?} */
            let element = providers[i];
            this.providers.set(element.id, element.provider);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class AuthService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this._user = null;
        this._authState = new BehaviorSubject(null);
        this.providers = config.providers;
        this.providers.forEach((provider, key) => {
            provider.initialize().then((user) => {
                user.provider = key;
                this._user = user;
                this._authState.next(user);
            }).catch((err) => {
                // this._authState.next(null);
            });
        });
    }
    /**
     * @return {?}
     */
    get authState() {
        return this._authState.asObservable();
    }
    /**
     * @param {?} providerId
     * @return {?}
     */
    signIn(providerId) {
        return new Promise((resolve, reject) => {
            /** @type {?} */
            let providerObject = this.providers.get(providerId);
            if (providerObject) {
                providerObject.signIn().then((user) => {
                    user.provider = providerId;
                    resolve(user);
                    this._user = user;
                    this._authState.next(user);
                });
            }
            else {
                reject(AuthService.LOGIN_PROVIDER_NOT_FOUND);
            }
        });
    }
    /**
     * @return {?}
     */
    signOut() {
        return new Promise((resolve, reject) => {
            if (this._user && this._user.provider) {
                /** @type {?} */
                let providerId = this._user.provider;
                /** @type {?} */
                let providerObject = this.providers.get(providerId);
                providerObject.signOut().then(() => {
                    this._user = null;
                    this._authState.next(null);
                    resolve();
                }).catch((err) => {
                    this._authState.next(null);
                });
            }
            else {
                reject(AuthService.LOGIN_PROVIDER_NOT_FOUND);
            }
        });
    }
}
AuthService.LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';
AuthService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AuthService.ctorParameters = () => [
    { type: AuthServiceConfig }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class DynamiSocialLoginModule {
}
DynamiSocialLoginModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [],
                providers: [AuthService],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { BaseLoginProvider, LinkedInResponseModel, LoginProviderClassModel, SocialUserModel, FacebookLoginProvider, GoogleLoginProvider, LinkedinLoginProvider, AuthServiceConfig, AuthService, DynamiSocialLoginModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,