(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-dynami-social-login', ['exports', '@angular/core', 'rxjs', '@angular/common'], factory) :
    (factory((global['ng-dynami-social-login'] = {}),global.ng.core,global.rxjs,global.ng.common));
}(this, (function (exports,core,rxjs,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ BaseLoginProvider = /** @class */ (function () {
        function BaseLoginProvider() {
        }
        /**
         * @param {?} obj
         * @param {?} onload
         * @return {?}
         */
        BaseLoginProvider.prototype.loadScript = /**
         * @param {?} obj
         * @param {?} onload
         * @return {?}
         */
            function (obj, onload) {
                if (document.getElementById(obj.name)) {
                    return;
                }
                /** @type {?} */
                var signInJS = document.createElement('script');
                signInJS.async = true;
                signInJS.src = obj.url;
                signInJS.onload = onload;
                if (obj.name === 'LINKEDIN') {
                    signInJS.async = false;
                    signInJS.text = ('api_key: ' + obj.id).replace('\'', '');
                }
                document.head.appendChild(signInJS);
            };
        return BaseLoginProvider;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var LinkedInResponseModel = /** @class */ (function () {
        function LinkedInResponseModel() {
        }
        return LinkedInResponseModel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var LoginProviderClassModel = /** @class */ (function () {
        function LoginProviderClassModel() {
        }
        return LoginProviderClassModel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var SocialUserModel = /** @class */ (function () {
        function SocialUserModel() {
        }
        return SocialUserModel;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var FacebookLoginProvider = /** @class */ (function (_super) {
        __extends(FacebookLoginProvider, _super);
        function FacebookLoginProvider(clientId) {
            var _this = _super.call(this) || this;
            _this.clientId = clientId;
            _this.loginProviderObj = new LoginProviderClassModel();
            _this.loginProviderObj.id = clientId;
            _this.loginProviderObj.name = 'facebook';
            _this.loginProviderObj.url = 'https://connect.facebook.net/en_US/sdk.js';
            return _this;
        }
        /**
         * @return {?}
         */
        FacebookLoginProvider.prototype.initialize = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    _this.loadScript(_this.loginProviderObj, function () {
                        FB.init({
                            appId: _this.clientId,
                            autoLogAppEvents: true,
                            cookie: true,
                            xfbml: true,
                            version: 'v2.10'
                        });
                        FB.AppEvents.logPageView();
                        FB.getLoginStatus(function (response) {
                            if (response.status === 'connected') {
                                /** @type {?} */
                                var accessToken_1 = FB.getAuthResponse()['accessToken'];
                                FB.api('/me?fields=name,email,picture', function (res) {
                                    resolve(FacebookLoginProvider.drawUser(Object.assign({}, { token: accessToken_1 }, res)));
                                });
                            }
                        });
                    });
                });
            };
        /**
         * @param {?} response
         * @return {?}
         */
        FacebookLoginProvider.drawUser = /**
         * @param {?} response
         * @return {?}
         */
            function (response) {
                /** @type {?} */
                var user = new SocialUserModel();
                user.id = response.id;
                user.name = response.name;
                user.email = response.email;
                user.token = response.token;
                user.image = 'https://graph.facebook.com/' + response.id + '/picture?type=normal';
                return user;
            };
        /**
         * @return {?}
         */
        FacebookLoginProvider.prototype.signIn = /**
         * @return {?}
         */
            function () {
                return new Promise(function (resolve, reject) {
                    FB.login(function (response) {
                        if (response.authResponse) {
                            /** @type {?} */
                            var accessToken_2 = FB.getAuthResponse()['accessToken'];
                            FB.api('/me?fields=name,email,picture', function (res) {
                                resolve(FacebookLoginProvider.drawUser(Object.assign({}, { token: accessToken_2 }, res)));
                            });
                        }
                    }, { scope: 'email,public_profile' });
                });
            };
        /**
         * @return {?}
         */
        FacebookLoginProvider.prototype.signOut = /**
         * @return {?}
         */
            function () {
                return new Promise(function (resolve, reject) {
                    FB.logout(function (response) {
                        resolve();
                    });
                });
            };
        FacebookLoginProvider.PROVIDER_ID = 'facebook';
        return FacebookLoginProvider;
    }(BaseLoginProvider));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var GoogleLoginProvider = /** @class */ (function (_super) {
        __extends(GoogleLoginProvider, _super);
        function GoogleLoginProvider(clientId) {
            var _this = _super.call(this) || this;
            _this.clientId = clientId;
            _this.loginProviderObj = new LoginProviderClassModel();
            _this.loginProviderObj.id = clientId;
            _this.loginProviderObj.name = 'google';
            _this.loginProviderObj.url = 'https://apis.google.com/js/platform.js';
            return _this;
        }
        /**
         * @return {?}
         */
        GoogleLoginProvider.prototype.initialize = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    _this.loadScript(_this.loginProviderObj, function () {
                        gapi.load('auth2', function () {
                            _this.auth2 = gapi.auth2.init({
                                client_id: _this.clientId,
                                scope: 'email'
                            });
                            _this.auth2.then(function () {
                                if (_this.auth2.isSignedIn.get()) {
                                    resolve(_this.drawUser());
                                }
                            });
                        });
                    });
                });
            };
        /**
         * @return {?}
         */
        GoogleLoginProvider.prototype.drawUser = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var user = new SocialUserModel();
                /** @type {?} */
                var profile = this.auth2.currentUser.get().getBasicProfile();
                /** @type {?} */
                var authResponseObj = this.auth2.currentUser.get().getAuthResponse(true);
                user.id = profile.getId();
                user.name = profile.getName();
                user.email = profile.getEmail();
                user.image = profile.getImageUrl();
                user.token = authResponseObj.access_token;
                user.idToken = authResponseObj.id_token;
                return user;
            };
        /**
         * @return {?}
         */
        GoogleLoginProvider.prototype.signIn = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    /** @type {?} */
                    var promise = _this.auth2.signIn();
                    promise.then(function () {
                        resolve(_this.drawUser());
                    });
                });
            };
        /**
         * @return {?}
         */
        GoogleLoginProvider.prototype.signOut = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    _this.auth2.signOut().then(function (err) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve();
                        }
                    });
                });
            };
        GoogleLoginProvider.PROVIDER_ID = 'google';
        return GoogleLoginProvider;
    }(BaseLoginProvider));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var LinkedinLoginProvider = /** @class */ (function (_super) {
        __extends(LinkedinLoginProvider, _super);
        function LinkedinLoginProvider(clientId) {
            var _this = _super.call(this) || this;
            _this.clientId = clientId;
            _this.loginProviderObj = new LoginProviderClassModel();
            _this.loginProviderObj.id = clientId;
            _this.loginProviderObj.name = 'linkedin';
            _this.loginProviderObj.url = 'https://platform.linkedin.com/in.js';
            return _this;
        }
        /**
         * @return {?}
         */
        LinkedinLoginProvider.prototype.initialize = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    _this.loadScript(_this.loginProviderObj, function () {
                        IN.init({
                            api_key: _this.clientId,
                            authorize: true,
                            onLoad: _this.onLinkedInLoad()
                        });
                        IN.Event.on(IN, 'auth', function () {
                            if (IN.User.isAuthorized()) {
                                IN.API.Raw('/people/~:(id,first-name,last-name,email-address,picture-url)').result(function (res) {
                                    resolve(_this.drawUser(res));
                                });
                            }
                        });
                    });
                });
            };
        /**
         * @return {?}
         */
        LinkedinLoginProvider.prototype.onLinkedInLoad = /**
         * @return {?}
         */
            function () {
                IN.Event.on(IN, 'systemReady', function () {
                    IN.User.refresh();
                });
            };
        /**
         * @param {?} response
         * @return {?}
         */
        LinkedinLoginProvider.prototype.drawUser = /**
         * @param {?} response
         * @return {?}
         */
            function (response) {
                /** @type {?} */
                var user = new SocialUserModel();
                user.id = response.emailAddress;
                user.name = response.firstName + ' ' + response.lastName;
                user.email = response.emailAddress;
                user.image = response.pictureUrl;
                user.token = IN.ENV.auth.oauth_token;
                return user;
            };
        /**
         * @return {?}
         */
        LinkedinLoginProvider.prototype.signIn = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    IN.User.authorize(function () {
                        IN.API.Raw('/people/~:(id,first-name,last-name,email-address,picture-url)').result(function (res) {
                            resolve(_this.drawUser(res));
                        });
                    });
                });
            };
        /**
         * @return {?}
         */
        LinkedinLoginProvider.prototype.signOut = /**
         * @return {?}
         */
            function () {
                return new Promise(function (resolve, reject) {
                    IN.User.logout(function (response) {
                        resolve();
                    }, function (err) {
                        reject(err);
                    });
                });
            };
        LinkedinLoginProvider.PROVIDER_ID = 'linkedin';
        return LinkedinLoginProvider;
    }(BaseLoginProvider));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var AuthServiceConfig = /** @class */ (function () {
        function AuthServiceConfig(providers) {
            this.providers = new Map();
            for (var i = 0; i < providers.length; i++) {
                /** @type {?} */
                var element = providers[i];
                this.providers.set(element.id, element.provider);
            }
        }
        return AuthServiceConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var AuthService = /** @class */ (function () {
        function AuthService(config) {
            var _this = this;
            this._user = null;
            this._authState = new rxjs.BehaviorSubject(null);
            this.providers = config.providers;
            this.providers.forEach(function (provider, key) {
                provider.initialize().then(function (user) {
                    user.provider = key;
                    _this._user = user;
                    _this._authState.next(user);
                }).catch(function (err) {
                    // this._authState.next(null);
                });
            });
        }
        Object.defineProperty(AuthService.prototype, "authState", {
            get: /**
             * @return {?}
             */ function () {
                return this._authState.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} providerId
         * @return {?}
         */
        AuthService.prototype.signIn = /**
         * @param {?} providerId
         * @return {?}
         */
            function (providerId) {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    /** @type {?} */
                    var providerObject = _this.providers.get(providerId);
                    if (providerObject) {
                        providerObject.signIn().then(function (user) {
                            user.provider = providerId;
                            resolve(user);
                            _this._user = user;
                            _this._authState.next(user);
                        });
                    }
                    else {
                        reject(AuthService.LOGIN_PROVIDER_NOT_FOUND);
                    }
                });
            };
        /**
         * @return {?}
         */
        AuthService.prototype.signOut = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    if (_this._user && _this._user.provider) {
                        /** @type {?} */
                        var providerId = _this._user.provider;
                        /** @type {?} */
                        var providerObject = _this.providers.get(providerId);
                        providerObject.signOut().then(function () {
                            _this._user = null;
                            _this._authState.next(null);
                            resolve();
                        }).catch(function (err) {
                            _this._authState.next(null);
                        });
                    }
                    else {
                        reject(AuthService.LOGIN_PROVIDER_NOT_FOUND);
                    }
                });
            };
        AuthService.LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';
        AuthService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AuthService.ctorParameters = function () {
            return [
                { type: AuthServiceConfig }
            ];
        };
        return AuthService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var DynamiSocialLoginModule = /** @class */ (function () {
        function DynamiSocialLoginModule() {
        }
        DynamiSocialLoginModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [],
                        providers: [AuthService],
                    },] }
        ];
        return DynamiSocialLoginModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.BaseLoginProvider = BaseLoginProvider;
    exports.LinkedInResponseModel = LinkedInResponseModel;
    exports.LoginProviderClassModel = LoginProviderClassModel;
    exports.SocialUserModel = SocialUserModel;
    exports.FacebookLoginProvider = FacebookLoginProvider;
    exports.GoogleLoginProvider = GoogleLoginProvider;
    exports.LinkedinLoginProvider = LinkedinLoginProvider;
    exports.AuthServiceConfig = AuthServiceConfig;
    exports.AuthService = AuthService;
    exports.DynamiSocialLoginModule = DynamiSocialLoginModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,